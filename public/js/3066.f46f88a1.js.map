{"version":3,"file":"js/3066.f46f88a1.js","mappings":"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","sources":["webpack://admin/./node_modules/@codemirror/legacy-modes/mode/crystal.js"],"sourcesContent":["function wordRegExp(words, end) {\n  return new RegExp((end ? \"\" : \"^\") + \"(?:\" + words.join(\"|\") + \")\" + (end ? \"$\" : \"\\\\b\"));\n}\n\nfunction chain(tokenize, stream, state) {\n  state.tokenize.push(tokenize);\n  return tokenize(stream, state);\n}\n\nvar operators = /^(?:[-+/%|&^]|\\*\\*?|[<>]{2})/;\nvar conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;\nvar indexingOperators = /^(?:\\[\\][?=]?)/;\nvar anotherOperators = /^(?:\\.(?:\\.{2})?|->|[?:])/;\nvar idents = /^[a-z_\\u009F-\\uFFFF][a-zA-Z0-9_\\u009F-\\uFFFF]*/;\nvar types = /^[A-Z_\\u009F-\\uFFFF][a-zA-Z0-9_\\u009F-\\uFFFF]*/;\nvar keywords = wordRegExp([\n  \"abstract\", \"alias\", \"as\", \"asm\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"do\",\n  \"else\", \"elsif\", \"end\", \"ensure\", \"enum\", \"extend\", \"for\", \"fun\", \"if\",\n  \"include\", \"instance_sizeof\", \"lib\", \"macro\", \"module\", \"next\", \"of\", \"out\", \"pointerof\",\n  \"private\", \"protected\", \"rescue\", \"return\", \"require\", \"select\", \"sizeof\", \"struct\",\n  \"super\", \"then\", \"type\", \"typeof\", \"uninitialized\", \"union\", \"unless\", \"until\", \"when\", \"while\", \"with\",\n  \"yield\", \"__DIR__\", \"__END_LINE__\", \"__FILE__\", \"__LINE__\"\n]);\nvar atomWords = wordRegExp([\"true\", \"false\", \"nil\", \"self\"]);\nvar indentKeywordsArray = [\n  \"def\", \"fun\", \"macro\",\n  \"class\", \"module\", \"struct\", \"lib\", \"enum\", \"union\",\n  \"do\", \"for\"\n];\nvar indentKeywords = wordRegExp(indentKeywordsArray);\nvar indentExpressionKeywordsArray = [\"if\", \"unless\", \"case\", \"while\", \"until\", \"begin\", \"then\"];\nvar indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);\nvar dedentKeywordsArray = [\"end\", \"else\", \"elsif\", \"rescue\", \"ensure\"];\nvar dedentKeywords = wordRegExp(dedentKeywordsArray);\nvar dedentPunctualsArray = [\"\\\\)\", \"\\\\}\", \"\\\\]\"];\nvar dedentPunctuals = new RegExp(\"^(?:\" + dedentPunctualsArray.join(\"|\") + \")$\");\nvar nextTokenizer = {\n  \"def\": tokenFollowIdent, \"fun\": tokenFollowIdent, \"macro\": tokenMacroDef,\n  \"class\": tokenFollowType, \"module\": tokenFollowType, \"struct\": tokenFollowType,\n  \"lib\": tokenFollowType, \"enum\": tokenFollowType, \"union\": tokenFollowType\n};\nvar matching = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\", \"<\": \">\"};\n\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  // Macros\n  if (state.lastToken != \"\\\\\" && stream.match(\"{%\", false)) {\n    return chain(tokenMacro(\"%\", \"%\"), stream, state);\n  }\n\n  if (state.lastToken != \"\\\\\" && stream.match(\"{{\", false)) {\n    return chain(tokenMacro(\"{\", \"}\"), stream, state);\n  }\n\n  // Comments\n  if (stream.peek() == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Variables and keywords\n  var matched;\n  if (stream.match(idents)) {\n    stream.eat(/[?!]/);\n\n    matched = stream.current();\n    if (stream.eat(\":\")) {\n      return \"atom\";\n    } else if (state.lastToken == \".\") {\n      return \"property\";\n    } else if (keywords.test(matched)) {\n      if (indentKeywords.test(matched)) {\n        if (!(matched == \"fun\" && state.blocks.indexOf(\"lib\") >= 0) && !(matched == \"def\" && state.lastToken == \"abstract\")) {\n          state.blocks.push(matched);\n          state.currentIndent += 1;\n        }\n      } else if ((state.lastStyle == \"operator\" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {\n        state.blocks.push(matched);\n        state.currentIndent += 1;\n      } else if (matched == \"end\") {\n        state.blocks.pop();\n        state.currentIndent -= 1;\n      }\n\n      if (nextTokenizer.hasOwnProperty(matched)) {\n        state.tokenize.push(nextTokenizer[matched]);\n      }\n\n      return \"keyword\";\n    } else if (atomWords.test(matched)) {\n      return \"atom\";\n    }\n\n    return \"variable\";\n  }\n\n  // Class variables and instance variables\n  // or attributes\n  if (stream.eat(\"@\")) {\n    if (stream.peek() == \"[\") {\n      return chain(tokenNest(\"[\", \"]\", \"meta\"), stream, state);\n    }\n\n    stream.eat(\"@\");\n    stream.match(idents) || stream.match(types);\n    return \"propertyName\";\n  }\n\n  // Constants and types\n  if (stream.match(types)) {\n    return \"tag\";\n  }\n\n  // Symbols or ':' operator\n  if (stream.eat(\":\")) {\n    if (stream.eat(\"\\\"\")) {\n      return chain(tokenQuote(\"\\\"\", \"atom\", false), stream, state);\n    } else if (stream.match(idents) || stream.match(types) ||\n               stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {\n      return \"atom\";\n    }\n    stream.eat(\":\");\n    return \"operator\";\n  }\n\n  // Strings\n  if (stream.eat(\"\\\"\")) {\n    return chain(tokenQuote(\"\\\"\", \"string\", true), stream, state);\n  }\n\n  // Strings or regexps or macro variables or '%' operator\n  if (stream.peek() == \"%\") {\n    var style = \"string\";\n    var embed = true;\n    var delim;\n\n    if (stream.match(\"%r\")) {\n      // Regexps\n      style = \"string.special\";\n      delim = stream.next();\n    } else if (stream.match(\"%w\")) {\n      embed = false;\n      delim = stream.next();\n    } else if (stream.match(\"%q\")) {\n      embed = false;\n      delim = stream.next();\n    } else {\n      if(delim = stream.match(/^%([^\\w\\s=])/)) {\n        delim = delim[1];\n      } else if (stream.match(/^%[a-zA-Z_\\u009F-\\uFFFF][\\w\\u009F-\\uFFFF]*/)) {\n        // Macro variables\n        return \"meta\";\n      } else if (stream.eat('%')) {\n        // '%' operator\n        return \"operator\";\n      }\n    }\n\n    if (matching.hasOwnProperty(delim)) {\n      delim = matching[delim];\n    }\n    return chain(tokenQuote(delim, style, embed), stream, state);\n  }\n\n  // Here Docs\n  if (matched = stream.match(/^<<-('?)([A-Z]\\w*)\\1/)) {\n    return chain(tokenHereDoc(matched[2], !matched[1]), stream, state)\n  }\n\n  // Characters\n  if (stream.eat(\"'\")) {\n    stream.match(/^(?:[^']|\\\\(?:[befnrtv0'\"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\\{[0-9a-fA-F]{1,6}\\})))/);\n    stream.eat(\"'\");\n    return \"atom\";\n  }\n\n  // Numbers\n  if (stream.eat(\"0\")) {\n    if (stream.eat(\"x\")) {\n      stream.match(/^[0-9a-fA-F_]+/);\n    } else if (stream.eat(\"o\")) {\n      stream.match(/^[0-7_]+/);\n    } else if (stream.eat(\"b\")) {\n      stream.match(/^[01_]+/);\n    }\n    return \"number\";\n  }\n\n  if (stream.eat(/^\\d/)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+-]?\\d+)?/);\n    return \"number\";\n  }\n\n  // Operators\n  if (stream.match(operators)) {\n    stream.eat(\"=\"); // Operators can follow assign symbol.\n    return \"operator\";\n  }\n\n  if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {\n    return \"operator\";\n  }\n\n  // Parens and braces\n  if (matched = stream.match(/[({[]/, false)) {\n    matched = matched[0];\n    return chain(tokenNest(matched, matching[matched], null), stream, state);\n  }\n\n  // Escapes\n  if (stream.eat(\"\\\\\")) {\n    stream.next();\n    return \"meta\";\n  }\n\n  stream.next();\n  return null;\n}\n\nfunction tokenNest(begin, end, style, started) {\n  return function (stream, state) {\n    if (!started && stream.match(begin)) {\n      state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);\n      state.currentIndent += 1;\n      return style;\n    }\n\n    var nextStyle = tokenBase(stream, state);\n    if (stream.current() === end) {\n      state.tokenize.pop();\n      state.currentIndent -= 1;\n      nextStyle = style;\n    }\n\n    return nextStyle;\n  };\n}\n\nfunction tokenMacro(begin, end, started) {\n  return function (stream, state) {\n    if (!started && stream.match(\"{\" + begin)) {\n      state.currentIndent += 1;\n      state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);\n      return \"meta\";\n    }\n\n    if (stream.match(end + \"}\")) {\n      state.currentIndent -= 1;\n      state.tokenize.pop();\n      return \"meta\";\n    }\n\n    return tokenBase(stream, state);\n  };\n}\n\nfunction tokenMacroDef(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var matched;\n  if (matched = stream.match(idents)) {\n    if (matched == \"def\") {\n      return \"keyword\";\n    }\n    stream.eat(/[?!]/);\n  }\n\n  state.tokenize.pop();\n  return \"def\";\n}\n\nfunction tokenFollowIdent(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  if (stream.match(idents)) {\n    stream.eat(/[!?]/);\n  } else {\n    stream.match(operators) || stream.match(conditionalOperators) || stream.match(indexingOperators);\n  }\n  state.tokenize.pop();\n  return \"def\";\n}\n\nfunction tokenFollowType(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  stream.match(types);\n  state.tokenize.pop();\n  return \"def\";\n}\n\nfunction tokenQuote(end, style, embed) {\n  return function (stream, state) {\n    var escaped = false;\n\n    while (stream.peek()) {\n      if (!escaped) {\n        if (stream.match(\"{%\", false)) {\n          state.tokenize.push(tokenMacro(\"%\", \"%\"));\n          return style;\n        }\n\n        if (stream.match(\"{{\", false)) {\n          state.tokenize.push(tokenMacro(\"{\", \"}\"));\n          return style;\n        }\n\n        if (embed && stream.match(\"#{\", false)) {\n          state.tokenize.push(tokenNest(\"#{\", \"}\", \"meta\"));\n          return style;\n        }\n\n        var ch = stream.next();\n\n        if (ch == end) {\n          state.tokenize.pop();\n          return style;\n        }\n\n        escaped = embed && ch == \"\\\\\";\n      } else {\n        stream.next();\n        escaped = false;\n      }\n    }\n\n    return style;\n  };\n}\n\nfunction tokenHereDoc(phrase, embed) {\n  return function (stream, state) {\n    if (stream.sol()) {\n      stream.eatSpace()\n      if (stream.match(phrase)) {\n        state.tokenize.pop();\n        return \"string\";\n      }\n    }\n\n    var escaped = false;\n    while (stream.peek()) {\n      if (!escaped) {\n        if (stream.match(\"{%\", false)) {\n          state.tokenize.push(tokenMacro(\"%\", \"%\"));\n          return \"string\";\n        }\n\n        if (stream.match(\"{{\", false)) {\n          state.tokenize.push(tokenMacro(\"{\", \"}\"));\n          return \"string\";\n        }\n\n        if (embed && stream.match(\"#{\", false)) {\n          state.tokenize.push(tokenNest(\"#{\", \"}\", \"meta\"));\n          return \"string\";\n        }\n\n        escaped = embed && stream.next() == \"\\\\\";\n      } else {\n        stream.next();\n        escaped = false;\n      }\n    }\n\n    return \"string\";\n  }\n}\n\nexport const crystal = {\n  name: \"crystal\",\n  startState: function () {\n    return {\n      tokenize: [tokenBase],\n      currentIndent: 0,\n      lastToken: null,\n      lastStyle: null,\n      blocks: []\n    };\n  },\n\n  token: function (stream, state) {\n    var style = state.tokenize[state.tokenize.length - 1](stream, state);\n    var token = stream.current();\n\n    if (style && style != \"comment\") {\n      state.lastToken = token;\n      state.lastStyle = style;\n    }\n\n    return style;\n  },\n\n  indent: function (state, textAfter, cx) {\n    textAfter = textAfter.replace(/^\\s*(?:\\{%)?\\s*|\\s*(?:%\\})?\\s*$/g, \"\");\n\n    if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {\n      return cx.unit * (state.currentIndent - 1);\n    }\n\n    return cx.unit * state.currentIndent;\n  },\n\n  languageData: {\n    indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["wordRegExp","words","end","RegExp","join","chain","tokenize","stream","state","push","operators","conditionalOperators","indexingOperators","anotherOperators","idents","types","keywords","atomWords","indentKeywordsArray","indentKeywords","indentExpressionKeywordsArray","indentExpressionKeywords","dedentKeywordsArray","dedentKeywords","dedentPunctualsArray","dedentPunctuals","nextTokenizer","tokenFollowIdent","tokenMacroDef","tokenFollowType","matching","tokenBase","eatSpace","lastToken","match","tokenMacro","peek","skipToEnd","matched","eat","current","test","blocks","indexOf","currentIndent","lastStyle","pop","hasOwnProperty","tokenNest","tokenQuote","delim","style","embed","next","tokenHereDoc","begin","started","length","nextStyle","escaped","ch","phrase","sol","crystal","name","startState","token","indent","textAfter","cx","replace","unit","languageData","indentOnInput","concat","commentTokens","line"],"sourceRoot":""}