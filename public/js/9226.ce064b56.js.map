{"version":3,"file":"js/9226.ce064b56.js","mappings":"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","sources":["webpack://admin/./node_modules/@codemirror/legacy-modes/mode/ttcn.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst parserConfig = {\n  name: \"ttcn\",\n  keywords: words(\"activate address alive all alt altstep and and4b any\" +\n                  \" break case component const continue control deactivate\" +\n                  \" display do else encode enumerated except exception\" +\n                  \" execute extends extension external for from function\" +\n                  \" goto group if import in infinity inout interleave\" +\n                  \" label language length log match message mixed mod\" +\n                  \" modifies module modulepar mtc noblock not not4b nowait\" +\n                  \" of on optional or or4b out override param pattern port\" +\n                  \" procedure record recursive rem repeat return runs select\" +\n                  \" self sender set signature system template testcase to\" +\n                  \" type union value valueof var variant while with xor xor4b\"),\n  builtin: words(\"bit2hex bit2int bit2oct bit2str char2int char2oct encvalue\" +\n                 \" decomp decvalue float2int float2str hex2bit hex2int\" +\n                 \" hex2oct hex2str int2bit int2char int2float int2hex\" +\n                 \" int2oct int2str int2unichar isbound ischosen ispresent\" +\n                 \" isvalue lengthof log2str oct2bit oct2char oct2hex oct2int\" +\n                 \" oct2str regexp replace rnd sizeof str2bit str2float\" +\n                 \" str2hex str2int str2oct substr unichar2int unichar2char\" +\n                 \" enum2int\"),\n  types: words(\"anytype bitstring boolean char charstring default float\" +\n               \" hexstring integer objid octetstring universal verdicttype timer\"),\n  timerOps: words(\"read running start stop timeout\"),\n  portOps: words(\"call catch check clear getcall getreply halt raise receive\" +\n                 \" reply send trigger\"),\n  configOps: words(\"create connect disconnect done kill killed map unmap\"),\n  verdictOps: words(\"getverdict setverdict\"),\n  sutOps: words(\"action\"),\n  functionOps: words(\"apply derefers refers\"),\n\n  verdictConsts: words(\"error fail inconc none pass\"),\n  booleanConsts: words(\"true false\"),\n  otherConsts: words(\"null NULL omit\"),\n\n  visibilityModifiers: words(\"private public friend\"),\n  templateMatch: words(\"complement ifpresent subset superset permutation\"),\n  multiLineStrings: true\n}\n\nvar wordList = []\nfunction add(obj) {\n  if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))\n    wordList.push(prop);\n}\nadd(parserConfig.keywords);\nadd(parserConfig.builtin);\nadd(parserConfig.timerOps);\nadd(parserConfig.portOps);\n\nvar keywords = parserConfig.keywords || {},\n    builtin = parserConfig.builtin || {},\n    timerOps = parserConfig.timerOps || {},\n    portOps  = parserConfig.portOps || {},\n    configOps = parserConfig.configOps || {},\n    verdictOps = parserConfig.verdictOps || {},\n    sutOps = parserConfig.sutOps || {},\n    functionOps = parserConfig.functionOps || {},\n\n    verdictConsts = parserConfig.verdictConsts || {},\n    booleanConsts = parserConfig.booleanConsts || {},\n    otherConsts   = parserConfig.otherConsts || {},\n\n    types = parserConfig.types || {},\n    visibilityModifiers = parserConfig.visibilityModifiers || {},\n    templateMatch = parserConfig.templateMatch || {},\n    multiLineStrings = parserConfig.multiLineStrings,\n    indentStatements = parserConfig.indentStatements !== false;\nvar isOperatorChar = /[+\\-*&@=<>!\\/]/;\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\\\:\\?\\.]/.test(ch)) {\n    curPunc = ch;\n    return \"punctuation\";\n  }\n  if (ch == \"#\"){\n    stream.skipToEnd();\n    return \"atom\";\n  }\n  if (ch == \"%\"){\n    stream.eatWhile(/\\b/);\n    return \"atom\";\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    if(ch == \"@\"){\n      if(stream.match(\"try\") || stream.match(\"catch\")\n         || stream.match(\"lazy\")){\n        return \"keyword\";\n      }\n    }\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n\n  if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n  if (builtin.propertyIsEnumerable(cur)) return \"builtin\";\n\n  if (timerOps.propertyIsEnumerable(cur)) return \"def\";\n  if (configOps.propertyIsEnumerable(cur)) return \"def\";\n  if (verdictOps.propertyIsEnumerable(cur)) return \"def\";\n  if (portOps.propertyIsEnumerable(cur)) return \"def\";\n  if (sutOps.propertyIsEnumerable(cur)) return \"def\";\n  if (functionOps.propertyIsEnumerable(cur)) return \"def\";\n\n  if (verdictConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (booleanConsts.propertyIsEnumerable(cur)) return \"string\";\n  if (otherConsts.propertyIsEnumerable(cur)) return \"string\";\n\n  if (types.propertyIsEnumerable(cur)) return \"typeName.standard\";\n  if (visibilityModifiers.propertyIsEnumerable(cur))\n    return \"modifier\";\n  if (templateMatch.propertyIsEnumerable(cur)) return \"atom\";\n\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped){\n        var afterQuote = stream.peek();\n        //look if the character after the quote is like the B in '10100010'B\n        if (afterQuote){\n          afterQuote = afterQuote.toLowerCase();\n          if(afterQuote == \"b\" || afterQuote == \"h\" || afterQuote == \"o\")\n            stream.next();\n        }\n        end = true; break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !(escaped || multiLineStrings))\n      state.tokenize = null;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = null;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\n\nfunction pushContext(state, col, type) {\n  var indent = state.indented;\n  if (state.context && state.context.type == \"statement\")\n    indent = state.context.indented;\n  return state.context = new Context(indent, col, type, null, state.context);\n}\n\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n//Interface\nexport const ttcn = {\n  name: \"ttcn\",\n  startState: function() {\n    return {\n      tokenize: null,\n      context: new Context(0, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n        && ctx.type == \"statement\"){\n      popContext(state);\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (indentStatements &&\n             (((ctx.type == \"}\" || ctx.type == \"top\") && curPunc != ';') ||\n              (ctx.type == \"statement\" && curPunc == \"newstatement\")))\n      pushContext(state, stream.column(), \"statement\");\n\n    state.startOfLine = false;\n\n    return style;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    autocomplete: wordList\n  }\n};\n"],"names":["words","str","obj","split","i","length","parserConfig","name","keywords","builtin","types","timerOps","portOps","configOps","verdictOps","sutOps","functionOps","verdictConsts","booleanConsts","otherConsts","visibilityModifiers","templateMatch","multiLineStrings","wordList","add","prop","hasOwnProperty","push","curPunc","indentStatements","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","tokenString","test","skipToEnd","eatWhile","eat","tokenComment","match","cur","current","propertyIsEnumerable","quote","escaped","end","afterQuote","peek","toLowerCase","maybeEnd","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","ttcn","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line","block","open","close","autocomplete"],"sourceRoot":""}