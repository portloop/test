{"version":3,"file":"js/8741.22645086.js","mappings":"0GAAA,SAASA,EAAWC,GAElB,IADA,IAAIC,EAAM,CAAC,EAAGC,EAAQF,EAAIG,MAAM,KACvBC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAGH,EAAIC,EAAME,KAAM,EACvD,OAAOH,CACT,C,yCACA,IAAIK,EAAWP,EAAW,+zBAatBQ,EAAYR,EAAW,kEACvBS,EAAiB,qBACrB,SAASC,EAAMC,EAAQC,EAAOC,GAE5B,OADAD,EAAME,SAAWD,EACVA,EAAEF,EAAQC,EACnB,CACA,SAASG,EAAUJ,EAAQC,GACzB,IAAII,EAAeJ,EAAMI,aACzBJ,EAAMI,cAAe,EACrB,IAAIC,EAAKN,EAAOO,OAChB,GAAW,KAAND,GAAmB,KAANA,IAAcL,EAAMO,SAE/B,IAAI,mBAAmBC,KAAKH,GAGjC,MAFU,KAANA,GAAaD,EAAcJ,EAAMO,UAAW,EACjC,KAANF,IAAWL,EAAMO,UAAW,GAC9B,KACF,GAAI,KAAKC,KAAKH,GAEnB,OADAN,EAAOU,SAAS,UACT,SACF,GAAU,KAANJ,EACT,OAAIN,EAAOW,IAAI,KACNZ,EAAMC,EAAQC,EAAOW,GACpB,KAANN,GAAaN,EAAOa,MAAM,YACrBd,EAAMC,EAAQC,EAAOa,IAC9Bd,EAAOe,YACA,WACF,GAAU,KAANT,EAET,OADAN,EAAOgB,OAAO,KACP,UACF,GAAU,KAANV,EAIT,OAHAN,EAAOU,SAAS,qBAChBV,EAAOU,SAAS,KAChBT,EAAMI,cAAe,EACd,UACF,GAAIP,EAAeW,KAAKH,GAE7B,OADAN,EAAOU,SAASZ,GACT,UAEPE,EAAOU,SAAS,wBAChB,IAAIO,EAAOjB,EAAOkB,UAAUC,cAC5B,OAAIvB,GAAYA,EAASwB,qBAAqBH,GACrC,UACLpB,GAAaA,EAAUuB,qBAAqBH,IAC9ChB,EAAMI,cAAe,EACd,WAEF,IACT,CApCE,OAAON,EAAMC,EAAQC,EAAOoB,EAAYf,GAqC5C,CACA,SAASe,EAAYC,GACnB,OAAO,SAAStB,EAAQC,GACtB,IAAqBM,EAAjBgB,GAAU,EAAaC,GAAM,EACjC,MAAiC,OAAzBjB,EAAOP,EAAOO,QAAiB,CACrC,GAAIA,GAAQe,IAAUC,EAAS,CAC7BC,GAAM,EACN,KACF,CACAD,GAAWA,GAAmB,MAARhB,CACxB,CAEA,OADIiB,IAAKvB,EAAME,SAAWC,GACnB,QACT,CACF,CACA,SAASQ,EAAaZ,EAAQC,GAC5B,IAAsBK,EAAlBmB,GAAW,EACf,MAAOnB,EAAKN,EAAOO,OAAQ,CACzB,GAAU,KAAND,GAAamB,EAAU,CACzBxB,EAAME,SAAWC,EACjB,KACF,CACAqB,EAAkB,KAANnB,CACd,CACA,MAAO,SACT,CACA,SAASQ,EAAcd,EAAQC,GAC7B,IAAkBK,EAAdmB,EAAW,EACf,MAAOnB,EAAKN,EAAOO,OAAQ,CACzB,GAAU,KAAND,GAAyB,GAAZmB,EAAe,CAC9BxB,EAAME,SAAWC,EACjB,KACF,CACU,KAANE,EACFmB,IACa,KAANnB,IACPmB,EAAW,EACf,CACA,MAAO,MACT,CACO,MAAMC,EAAM,CACjBC,KAAM,MACNC,WAAY,WACV,MAAO,CACLzB,SAAUC,EACVC,cAAc,EACdG,UAAU,EAEd,EACAqB,MAAO,SAAS7B,EAAQC,GACtB,OAAID,EAAO8B,WAAmB,KACvB7B,EAAME,SAASH,EAAQC,EAChC,EACA8B,aAAc,CACZC,cAAe,CAACC,KAAM,M","sources":["webpack://admin/./node_modules/@codemirror/legacy-modes/mode/tcl.js"],"sourcesContent":["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n                          \"filename flush for foreach format gets glob global history http if \" +\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n                          \"registry regsub rename resource return scan seek set socket source split \" +\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n                          \"vwait\");\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\n    return chain(stream, state, tokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;\n    else if (ch == \")\") state.inParams = false;\n    return null;\n  } else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } else if (ch == \"#\") {\n    if (stream.eat(\"*\"))\n      return chain(stream, state, tokenComment);\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n      return chain(stream, state, tokenUnparsed);\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == '\"') {\n    stream.skipTo(/\"/);\n    return \"comment\";\n  } else if (ch == \"$\") {\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n    stream.eatWhile(/}/);\n    state.beforeParams = true;\n    return \"builtin\";\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"comment\";\n  } else {\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n    var word = stream.current().toLowerCase();\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    if (functions && functions.propertyIsEnumerable(word)) {\n      state.beforeParams = true;\n      return \"keyword\";\n    }\n    return null;\n  }\n}\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\nexport const tcl = {\n  name: \"tcl\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["parseWords","str","obj","words","split","i","length","keywords","functions","isOperatorChar","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","word","current","toLowerCase","propertyIsEnumerable","tokenString","quote","escaped","end","maybeEnd","tcl","name","startState","token","eatSpace","languageData","commentTokens","line"],"sourceRoot":""}