{"version":3,"file":"js/3673.dfec5072.js","mappings":"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","sources":["webpack://admin/./node_modules/@codemirror/legacy-modes/mode/asn1.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nconst defaults = {\n  keywords: words(\"DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION\" +\n                  \" REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED\" +\n                  \" WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN\" +\n                  \" IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS\" +\n                  \" MINACCESS MAXACCESS REVISION STATUS DESCRIPTION\" +\n                  \" SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName\" +\n                  \" ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY\" +\n                  \" IMPLIED EXPORTS\"),\n  cmipVerbs: words(\"ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE\"),\n  compareTypes: words(\"OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY\" +\n                      \" MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY\" +\n                      \" OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL\" +\n                      \" SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL\" +\n                      \" TEXTUAL-CONVENTION\"),\n  status: words(\"current deprecated mandatory obsolete\"),\n  tags: words(\"APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS\" +\n              \" UNIVERSAL\"),\n  storage: words(\"BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING\" +\n                 \" UTCTime InterfaceIndex IANAifType CMIP-Attribute\" +\n                 \" REAL PACKAGE PACKAGES IpAddress PhysAddress\" +\n                 \" NetworkAddress BITS BMPString TimeStamp TimeTicks\" +\n                 \" TruthValue RowStatus DisplayString GeneralString\" +\n                 \" GraphicString IA5String NumericString\" +\n                 \" PrintableString SnmpAdminString TeletexString\" +\n                 \" UTF8String VideotexString VisibleString StringStore\" +\n                 \" ISO646String T61String UniversalString Unsigned32\" +\n                 \" Integer32 Gauge Gauge32 Counter Counter32 Counter64\"),\n  modifier: words(\"ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS\" +\n                  \" GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS\" +\n                  \" DEFINED\"),\n  accessTypes: words(\"not-accessible accessible-for-notify read-only\" +\n                     \" read-create read-write\"),\n  multiLineStrings: true\n}\n\nexport function asn1(parserConfig) {\n  var keywords = parserConfig.keywords || defaults.keywords,\n      cmipVerbs = parserConfig.cmipVerbs || defaults.cmipVerbs,\n      compareTypes = parserConfig.compareTypes || defaults.compareTypes,\n      status = parserConfig.status || defaults.status,\n      tags = parserConfig.tags || defaults.tags,\n      storage = parserConfig.storage || defaults.storage,\n      modifier = parserConfig.modifier || defaults.modifier,\n      accessTypes = parserConfig.accessTypes|| defaults.accessTypes,\n      multiLineStrings = parserConfig.multiLineStrings || defaults.multiLineStrings,\n      indentStatements = parserConfig.indentStatements !== false;\n  var isOperatorChar = /[\\|\\^]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]\\(\\){}:=,;]/.test(ch)) {\n      curPunc = ch;\n      return \"punctuation\";\n    }\n    if (ch == \"-\"){\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n\n    stream.eatWhile(/[\\w\\-]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (cmipVerbs.propertyIsEnumerable(cur)) return \"variableName\";\n    if (compareTypes.propertyIsEnumerable(cur)) return \"atom\";\n    if (status.propertyIsEnumerable(cur)) return \"comment\";\n    if (tags.propertyIsEnumerable(cur)) return \"typeName\";\n    if (storage.propertyIsEnumerable(cur)) return \"modifier\";\n    if (modifier.propertyIsEnumerable(cur)) return \"modifier\";\n    if (accessTypes.propertyIsEnumerable(cur)) return \"modifier\";\n\n    return \"variableName\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped){\n          var afterNext = stream.peek();\n          //look if the character if the quote is like the B in '10100010'B\n          if (afterNext){\n            afterNext = afterNext.toLowerCase();\n            if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n              stream.next();\n          }\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    if (state.context && state.context.type == \"statement\")\n      indent = state.context.indented;\n    return state.context = new Context(indent, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  //Interface\n  return {\n    name: \"asn1\",\n    startState: function() {\n      return {\n        tokenize: null,\n        context: new Context(-2, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n          && ctx.type == \"statement\"){\n        popContext(state);\n      }\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n                                     && curPunc != ';') || (ctx.type == \"statement\"\n                                                            && curPunc == \"newstatement\")))\n        pushContext(state, stream.column(), \"statement\");\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    languageData: {\n      indentOnInput: /^\\s*[{}]$/,\n      commentTokens: {line: \"--\"}\n    }\n  };\n};\n"],"names":["words","str","obj","split","i","length","defaults","keywords","cmipVerbs","compareTypes","status","tags","storage","modifier","accessTypes","multiLineStrings","asn1","parserConfig","curPunc","indentStatements","isOperatorChar","tokenBase","stream","state","ch","next","tokenize","tokenString","test","eat","skipToEnd","eatWhile","cur","current","propertyIsEnumerable","quote","escaped","end","afterNext","peek","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","indent","context","popContext","t","name","startState","startOfLine","token","ctx","sol","indentation","eatSpace","style","languageData","indentOnInput","commentTokens","line"],"sourceRoot":""}