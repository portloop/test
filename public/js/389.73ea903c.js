"use strict";(self["webpackChunkadmin"]=self["webpackChunkadmin"]||[]).push([[389],{389:function(e,t,n){function r(e,t,n){return t(n),n(e,t)}n.r(t),n.d(t,{haskell:function(){return F}});var a=/[a-z_]/,i=/[A-Z]/,o=/\d/,l=/[0-9A-Fa-f]/,u=/[0-7]/,s=/[a-z_A-Z0-9'\xa1-\uffff]/,c=/[-!#$%&*+.\/<=>?@\\^|~:]/,f=/[(),;[\]`{}]/,d=/[ \t\v\f]/;function m(e,t){if(e.eatWhile(d))return null;var n=e.next();if(f.test(n)){if("{"==n&&e.eat("-")){var m="comment";return e.eat("#")&&(m="meta"),r(e,t,h(m,1))}return null}if("'"==n)return e.eat("\\"),e.next(),e.eat("'")?"string":"error";if('"'==n)return r(e,t,p);if(i.test(n))return e.eatWhile(s),e.eat(".")?"qualifier":"type";if(a.test(n))return e.eatWhile(s),"variable";if(o.test(n)){if("0"==n){if(e.eat(/[xX]/))return e.eatWhile(l),"integer";if(e.eat(/[oO]/))return e.eatWhile(u),"number"}e.eatWhile(o);m="number";return e.match(/^\.\d+/)&&(m="number"),e.eat(/[eE]/)&&(m="number",e.eat(/[-+]/),e.eatWhile(o)),m}return"."==n&&e.eat(".")?"keyword":c.test(n)?"-"==n&&e.eat(/-/)&&(e.eatWhile(/-/),!e.eat(c))?(e.skipToEnd(),"comment"):(e.eatWhile(c),"variable"):"error"}function h(e,t){return 0==t?m:function(n,r){var a=t;while(!n.eol()){var i=n.next();if("{"==i&&n.eat("-"))++a;else if("-"==i&&n.eat("}")&&(--a,0==a))return r(m),e}return r(h(e,a)),e}}function p(e,t){while(!e.eol()){var n=e.next();if('"'==n)return t(m),"string";if("\\"==n){if(e.eol()||e.eat(d))return t(g),"string";e.eat("&")||e.next()}}return t(m),"error"}function g(e,t){return e.eat("\\")?r(e,t,p):(e.next(),t(m),"error")}var w=function(){var e={};function t(t){return function(){for(var n=0;n<arguments.length;n++)e[arguments[n]]=t}}return t("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),t("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),t("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<*","<=","<$>","<*>","=<<","==",">",">=",">>",">>=","^","^^","||","*","*>","**"),t("builtin")("Applicative","Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),t("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","pure","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3"),e}();const F={name:"haskell",startState:function(){return{f:m}},copyState:function(e){return{f:e.f}},token:function(e,t){var n=t.f(e,(function(e){t.f=e})),r=e.current();return w.hasOwnProperty(r)?w[r]:n},languageData:{commentTokens:{line:"--",block:{open:"{-",close:"-}"}}}}}}]);
//# sourceMappingURL=389.73ea903c.js.map